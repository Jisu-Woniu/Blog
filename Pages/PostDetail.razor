@page "/posts/detail/{UrlTitle?}"
@using Markdig
@using GiscusBlazor
@using Blog.Models
@using System.Text.RegularExpressions
@inject MarkdownPipeline _pipeline
@inject HttpClient _httpClient
@inject Task<Dictionary<string, PostInfo>> _postsMapTask

<PageTitle>@Title</PageTitle>

@*正文部分*@
@(new MarkupString(Content))

@if (_fetched)
{
    <hr />

    <p class="endnote">
        本文为原创作品，发布于 @(PostTime.SiteFormat())，根据
        <fluent-anchor appearance="hypertext" href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">
            知识共享署名-相同方式共享 4.0 国际（CC BY-SA 4.0）
        </fluent-anchor>
        许可协议进行许可。
        <fluent-anchor appearance="hypertext" href="https://creativecommons.org/licenses/by-sa/4.0/deed.zh">
            <img alt="知识共享许可协议" src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" />
        </fluent-anchor>
    </p>

    <Giscus Category="Announcements"
            CategoryId="DIC_kwDOG4JZsc4CBQ54"
            EmitMetadata="false"
            InputPosition="InputPosition.Top"
            Lang="zh-CN"
            Mapping="Mapping.PathName"
            ReactionsEnabled="true"
            Repo="Jisu-Woniu/Blog"
            RepoId="R_kgDOG4JZsQ"
            Theme="light" />

    @*<giscus-widget category="Announcements"
                   categoryid="DIC_kwDOG4JZsc4CBQ54"
                   emitmetadata="0"
                   inputposition="top"
                   lang="zh-CN"
                   mapping="pathname"
                   reactionsenabled="1"
                   repo="Jisu-Woniu/Blog"
                   repoid="R_kgDOG4JZsQ"
                   theme="light">
    </giscus-widget>*@
}

@code {
    PostInfo? Post { get; set; }
    string Content { get; set; } = string.Empty;

    [Parameter]
    public string? UrlTitle { get; set; }

    string Title { get; set; } = string.Empty;
    DateTimeOffset PostTime { get; set; }
    bool _fetched;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Dictionary<string, PostInfo> postsMap = await _postsMapTask;
        if (UrlTitle == null || !postsMap.ContainsKey(UrlTitle))
            throw new NullReferenceException("Page not found."); //404
        Post = postsMap[UrlTitle]; //(await _httpClient.GetFromJsonAsync<List<PostInfo>>("posts-info.json"))?[0];
        string markdownText = Post == null ? "# Hello World!\nThis is my post" : await _httpClient.GetStringAsync($"posts-src/{UrlTitle}.md");
        Title = Post?.Title ?? "Hello World!";
        PostTime = Post?.PostTime ?? DateTimeOffset.Now;
        Content = Regex.Replace(
            Markdown.ToHtml(markdownText, _pipeline),
            "<a ([\\w\\W\\r\\n]*?)</a>",
            "<fluent-anchor appearance=\"hypertext\" $1</fluent-anchor>",
            RegexOptions.Compiled);
        _fetched = true;
    }

}
